name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected-apps: ${{ steps.affected.outputs.apps }}
      affected-libs: ${{ steps.affected.outputs.libs }}
      has-affected: ${{ steps.affected.outputs.has-affected }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Check affected projects
        id: affected
        run: |
          AFFECTED_APPS=$(yarn nx show projects --affected --type=app --json | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')
          AFFECTED_LIBS=$(yarn nx show projects --affected --type=lib --json | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')
          
          echo "apps=$AFFECTED_APPS" >> $GITHUB_OUTPUT
          echo "libs=$AFFECTED_LIBS" >> $GITHUB_OUTPUT
          
          if [ ! -z "$AFFECTED_APPS" ] || [ ! -z "$AFFECTED_LIBS" ]; then
            echo "has-affected=true" >> $GITHUB_OUTPUT
          else
            echo "has-affected=false" >> $GITHUB_OUTPUT
          fi

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Lint affected projects
        run: yarn nx affected:lint --parallel=3

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ai_solution_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Run affected tests
        run: yarn nx affected:test --parallel=3 --coverage
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: test_user
          DATABASE_PASSWORD: test_password
          DATABASE_NAME: ai_solution_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          directory: coverage
          flags: unittests
          name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4

      - name: Build affected projects
        run: yarn nx affected:build --parallel=3

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-affected == 'true' && needs.setup.outputs.affected-apps != ''
    strategy:
      matrix:
        app: ${{ fromJson(format('["{0}"]', needs.setup.outputs.affected-apps)) }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ai_solution_e2e
          POSTGRES_USER: e2e_user
          POSTGRES_PASSWORD: e2e_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Run E2E tests
        run: yarn nx e2e ${{ matrix.app }}-e2e
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USER: e2e_user
          DATABASE_PASSWORD: e2e_password
          DATABASE_NAME: ai_solution_e2e
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: e2e-test-secret
          NODE_ENV: test

  security:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

  docker-build:
    runs-on: ubuntu-latest
    needs: [setup, build, test]
    if: needs.setup.outputs.affected-apps != '' && github.event_name == 'push'
    strategy:
      matrix:
        app: ${{ fromJson(format('["{0}"]', needs.setup.outputs.affected-apps)) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/services/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [lint, test, build, e2e, security]
    if: always()
    steps:
      - name: Notify success
        if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: echo "✅ All checks passed!"

      - name: Notify failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Some checks failed!"
          exit 1
name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'latest'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      apps: ${{ steps.apps.outputs.apps }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Get all apps
        id: apps
        run: |
          APPS=$(find apps/services -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "apps=$APPS" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare.outputs.apps) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn nx build ${{ matrix.app }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=raw,value=${{ needs.prepare.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/services/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-helm-charts:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Helm chart templates
        run: |
          mkdir -p helm-charts
          
          cat > helm-charts/Chart.yaml << EOF
          apiVersion: v2
          name: ai-solution-center
          description: AI Solution Center Helm Chart
          type: application
          version: ${{ needs.prepare.outputs.version }}
          appVersion: ${{ needs.prepare.outputs.version }}
          EOF
          
          mkdir -p helm-charts/templates
          
          # Create basic deployment template
          cat > helm-charts/templates/deployment.yaml << 'EOF'
          {{- range .Values.services }}
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ .name }}
            labels:
              app: {{ .name }}
          spec:
            replicas: {{ .replicas | default 1 }}
            selector:
              matchLabels:
                app: {{ .name }}
            template:
              metadata:
                labels:
                  app: {{ .name }}
              spec:
                containers:
                - name: {{ .name }}
                  image: "{{ $.Values.image.registry }}/{{ $.Values.image.repository }}/{{ .name }}:{{ $.Values.image.tag }}"
                  ports:
                  - containerPort: {{ .port | default 3000 }}
                  env:
                  {{- range $key, $value := .env }}
                  - name: {{ $key }}
                    value: "{{ $value }}"
                  {{- end }}
          {{- end }}
          EOF

      - name: Upload Helm charts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-charts/

  notify-success:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push, create-helm-charts]
    if: success()
    steps:
      - name: Notify deployment success
        run: |
          echo "ðŸš€ Release ${{ needs.prepare.outputs.version }} completed successfully!"
          echo "ðŸ“¦ Docker images pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "ðŸ“‹ Helm charts created for deployment"